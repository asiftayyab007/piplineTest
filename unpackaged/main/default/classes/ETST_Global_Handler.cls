public class ETST_Global_Handler {  
    @future
    public static void createETSTCommunityUsers(String jsonString){        
        List<Account> newAccounts = (List<Account>)Json.deserialize(jsonString,List<Account>.class);
        List<User> newUsers = new List<User>();
        String profileId;
        profileId = [SELECT Id FROM Profile WHERE name =:System.Label.ETST_ETS_Community_Login  LIMIT 1].id;       
        String orgId = UserInfo.getOrganizationId();
        String dateString = String.valueof(Datetime.now()).replace(' ','').replace(':','').replace('-','');
        Integer randomInt = Integer.valueOf(math.rint(math.random()*100));
        Id accParentRecordType = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Person_B2C').getRecordTypeId(); 
        String uniqueName = orgId + dateString + randomInt;
        if(uniqueName.length()>51){
            uniqueName=uniqueName.substring(0,51);
        }
        List<string> emailids=new  List<string>();
        List<string> existingUsers=new  List<string>();
        for(Account acc : newAccounts){
            emailids.add(acc.PersonEmail);
        }
        for (User u:[select Id,Email FROM User WHERE email IN: emailids and
                     profile.name='ETS Community Login' and isActive = true]){
                         existingUsers.add(u.Email);
                     }
        system.debug('newAccounts***'+newAccounts);
        for(Account acc : newAccounts){  
            if(acc.RecordTypeId == accParentRecordType && !existingUsers.contains(acc.PersonEmail)){
                User usr = new User();
                usr.FirstName = acc.FirstName;
                usr.LastName = acc.LastName;
                usr.Email = acc.personemail;
                usr.contactId=acc.personcontactId;
                usr.Alias =  uniqueName.substring(18, 23);
                usr.Username=acc.personemail+'.oneet';//.substring(0,acc.personemail.indexOf('@'))+System.Label.ET_Customer_User_Name_Postifx;//acc.personemail+'.etdev';
                usr.ProfileId=profileId;
                usr.TimeZoneSidKey ='Asia/Dubai';
                usr.LanguageLocaleKey ='en_US';
                usr.EmailEncodingKey ='UTF-8';
                usr.LocaleSidKey = 'en_US';
                newUsers.add(usr);   
            }
        }
        try{
            system.debug('newUsers'+newUsers);
            if(!newUsers.isEmpty()){
                insert newUsers;
            }
        }catch(DMLException ex){
            system.debug('Error in creating Contact'+ex.getMessage());
        }
        
    }
    
    public static void createorUpdateSchool(Map<Id, Account> newMap, Map<Id,Account> oldMap){
        List<ETST_School__c> etSchools = new List<ETST_School__c>();
        set<Id> accountIds = new set<id>();
        Map<Id, Id> mapOfAccountandSalesAgg = new Map<id, Id>();
        Map<Id, ETST_School__c> mapExistingSchool = new Map<Id, ETST_School__c>();
        Map<Id, Id> mapAccCal = new Map<Id, Id>();
        string schoolRecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Business_School').getRecordTypeId(); 
        
        for(Account acc : newMap.values()){
            if(acc.RecordTypeId == schoolRecordTypeId){
                accountIds.add(acc.id);
            }
        }        
        system.debug('accountIds***'+accountIds);
        for(ETST_School__c sch : [Select Id,Name,Customer__c FROM ETST_School__c WHERE Customer__c IN:accountIds]){
            mapExistingSchool.put(sch.Customer__c, sch);
        }
        system.debug('mapOfAccountandSalesAgg***'+mapOfAccountandSalesAgg);
        for(Account acc : newMap.values()){
            if(acc.RecordTypeId == schoolRecordTypeId){
                ETST_School__c sch;
                if(mapExistingSchool.keySet().size()>0){
                    sch = new ETST_School__c(id=MapExistingSchool.get(acc.id).Id);
                } else {
                    sch = new ETST_School__c();
                }
                sch.Name=acc.Name;
                sch.ETST_Account_Type__c = acc.ETST_Account_Type__c;
                sch.Customer__c = acc.id;
                sch.ETST_Division__c = acc.ETST_Division__c;
                sch.ETST_Grade__c = acc.ETST_Grade__c;
                sch.ETST_School_Paid__c = acc.ETST_School_Paid__c;
                sch.ETST_Phone__c = acc.Phone;
                //sch.ETST_Sales_Agreement__c = mapOfAccountandSalesAgg.get(acc.id);
                //sch.ETST_Calendar__c=mapAccCal.get(acc.id);
                etSchools.add(sch);
            }
        }
        if(!etSchools.isEmpty()){
            upsert etSchools;
        }
    }
    public static void UpdateSchoolSalesAgreement(Map<Id, ET_Sales_Agreement__c> newContractsMap,Map<Id, ET_Sales_Agreement__c> oldContractsMap){
        string schoolRecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Business_School').getRecordTypeId(); 
        System.debug('schoolRecordTypeId-->'+schoolRecordTypeId);
        Map<id,id> accMap=new Map<id,id>();
        List<ETST_School__c> etSchools = new List<ETST_School__c>();
        for(ET_Sales_Agreement__c sales : [select Salesforce_Customer__r.recordTypeId,
                                           Salesforce_Customer__c, Id from ET_Sales_Agreement__c
                                           where id IN :newContractsMap.keyset()]){
                                               System.debug('Salesforce_Customer__r.recordTypeId-->'+sales.Salesforce_Customer__r.recordTypeId);
                                               if(sales.Salesforce_Customer__r.recordTypeId==schoolRecordTypeId){
                                                   accMap.put(sales.Salesforce_Customer__c,sales.Id);
                                               }
                                           }
        System.debug('accMap-->'+accMap);
        for(ETST_School__c sch : [Select Id,Name,Customer__c FROM ETST_School__c WHERE Customer__c IN:accMap.keySet()] ){
            sch.ETST_Sales_Agreement__c = accMap.get(sch.Customer__c);
            etSchools.add(sch);
        }
        System.debug('etSchools-->'+etSchools);
        if(!etSchools.isEmpty()){
            update etSchools;
        }
    }
    
    /*  public static void UpdateSchoolCalendar(Map<Id, ETST_Calendar__c> newCalMap,Map<Id, ETST_Calendar__c> oldCalMap){
string schoolRecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('Business_School').getRecordTypeId(); 
System.debug('schoolRecordTypeId-->'+schoolRecordTypeId);
Map<id,id> accMap=new Map<id,id>();
List<ETST_School__c> etSchools = new List<ETST_School__c>();
for(ETST_Calendar__c cal : [select ETST_School__r.recordTypeId,
ETST_School__c, Id from ETST_Calendar__c
where id IN :newCalMap.keyset() AND ETST_Active__c=true
AND ETST_Current_Acadamic_Year__c= :Date.today().Year()]){
System.debug('ETST_School__r.recordTypeId-->'+cal.ETST_School__r.recordTypeId);
if(cal.ETST_School__r.recordTypeId==schoolRecordTypeId){
accMap.put(cal.ETST_School__c,cal.Id);
}
}
System.debug('accMap-->'+accMap);
for(ETST_School__c sch : [Select Id,Name,Customer__c FROM ETST_School__c WHERE Customer__c IN:accMap.keySet()] ){
sch.ETST_Calendar__c = accMap.get(sch.Customer__c);
etSchools.add(sch);
}
System.debug('etSchools-->'+etSchools);
if(!etSchools.isEmpty()){
update etSchools;
}
} */
    public static void onChangeCoordinatorOnSchool(Map<Id, Account> newMap, Map<Id, Account> oldMap){
        //System.debug('Entered onChangeCoordinatorOnSchool');
        //Integer i=0;
        Map<Id, Account> lstSchoolsCoordinatorChange = new Map<Id, Account>();
        List<ETST_Student__c> lstStudents = new List<ETST_Student__c>();
        List<ETST_Student__c> lstStudentstoUpdate = new List<ETST_Student__c>();
        List<ET_Service_Request__c> lstServiceRequeststoUpdate = new List<ET_Service_Request__c>();
        for(Account acc: newMap.values()){
            if(acc.ETST_Coordinator__c != null && acc.ETST_Coordinator__c !=oldMap.get(acc.id).ETST_Coordinator__c){
                lstSchoolsCoordinatorChange.put(acc.Id, acc);
            }
        }
        ETST_ShareAccountsWithCoordinator.ShareAccountsWithCoordinator(lstSchoolsCoordinatorChange.keyset());
        
        
        lstStudents = [Select Id,Name,OwnerId,ETST_School__c,(Select Id,Name,OwnerId,ETST_Status__c,ETST_Is_Active__c from ETST_Transport_Requests__r) from ETST_Student__c WHERE ETST_School__c IN:lstSchoolsCoordinatorChange.keyset()];
        for(ETST_Student__c student : lstStudents){
            student.OwnerId = lstSchoolsCoordinatorChange.get(student.ETST_School__c).ETST_Coordinator__c;
            lstStudentstoUpdate.add(student);
            for(ET_Service_Request__c request : student.ETST_Transport_Requests__r){
                
                if(request.ETST_Is_Active__c==true && (request.ETST_Status__c=='Under Review' || request.ETST_Status__c=='Location Update - Under Review')){ // Added by Sreelakshmi SK -- 15-Mar-2023
                    request.OwnerId = lstSchoolsCoordinatorChange.get(student.ETST_School__c).ETST_Coordinator__c;
                    lstServiceRequeststoUpdate.add(request);
                    //i=i+1;
                }
            }
        }
        //System.debug('lstServiceRequeststoUpdate: '+lstServiceRequeststoUpdate);
        //System.debug('i='+i);
        if(!lstStudentstoUpdate.isEmpty()){
            //System.debug('Updating Student');
            update lstStudentstoUpdate;
        }         
        if(!lstServiceRequeststoUpdate.isEmpty()) {
            System.debug('Updating Service Request out of loop');
            update lstServiceRequeststoUpdate;
        }
    }
    // @future(callout=true)
    public static void createInvoiceforServiceReq(String jsonString){
        List<ET_Service_Request__c> SRList = (List<ET_Service_Request__c>)Json.deserialize(jsonString,List<ET_Service_Request__c>.class);
        Id serviceReqSchoolRTId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Service_Request').getRecordTypeId();
        Id invoiceSchoolTranportRTId = Schema.SObjectType.Invoice__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Transport').getRecordTypeId();
        List<Invoice__c> invList = new List<Invoice__c>();
        for(ET_Service_Request__c sr: SRList){
            if(sr.RecordTypeId == serviceReqSchoolRTId && (sr.ETST_Fare_Charges__c != 0 || sr.ETST_Fare_Charges__c != null)){
                Invoice__c invoice=new Invoice__c();
                invoice.fromDate__c=Date.today();
                // invoice.ETST_Type__c = 'On Premise';
                invoice.Service_Request__c=sr.Id;
                invoice.RecordTypeId = invoiceSchoolTranportRTId;
                invoice.Zone__c=sr.ETST_Area_Zone__c;
                invoice.Total_Inv_Amount__c=sr.ETST_Fare_Charges__c;
                invoice.Location__c=sr.ET_Location__r.Name;
                invoice.ETST_Active__c = true;
                invoice.ETST_Coordinator__c=sr.ETST_Coordinator__c;
                invList.add(invoice);
            }
        }
        try{            
            if(!invList.isEmpty()){
                insert invList;
                //System.enqueueJob(new invoiceQuauable(invList));
                /* invList = [Select id, ETST_Activity_Center__c,Total_Inv_Amount__c FROM Invoice__c WHERE Id IN:invList];
if(!invList.isEmpty()){
createInvoiceLines(invList);
}   */                                       
            }            
        }catch(DMLException ex){
            system.debug('Error in creating Contact'+ex.getMessage());
        }
        
    }
    
    /* public static void createInvoiceLines(List<Invoice__c> newInvoices){
ET_Invoice_Lines__mdt lineItemmdt  = [SELECT DeveloperName,ET_LineType__c,ET_Tax_Code__c,ET_Tax_Rate__c,ET_Tax_Amount__c,ET_Department__c,ET_Project__c,ET_ServiceType__c FROM ET_Invoice_Lines__mdt WHERE DeveloperName='SCHOOL_BUS_FEE' limit 1];
List<ETST_Invoice_Lines_Location__mdt> lstLinesLocation = [Select DeveloperName,ETST_Location_Center__c, ETST_Location_Code__c FROM ETST_Invoice_Lines_Location__mdt];
List<ETST_Invoice_Lines_Activity__mdt> lstLinesActivity = [Select DeveloperName,ETST_Activity_Center__c, ETST_Activity_Code__c FROM ETST_Invoice_Lines_Activity__mdt];
List<ET_Invoice_Line_Item__c> lstInvoiceLineItems = new List<ET_Invoice_Line_Item__c>();
Map<String, ETST_Invoice_Lines_Location__mdt> mapInvoiceLinesLocations =  new Map<String, ETST_Invoice_Lines_Location__mdt>(); 
Map<String, ETST_Invoice_Lines_Activity__mdt> mapInvoiceLinesActivityCenter =  new Map<String, ETST_Invoice_Lines_Activity__mdt>(); 

for(ETST_Invoice_Lines_Location__mdt location : lstLinesLocation){
mapInvoiceLinesLocations.put(location.ETST_Location_Center__c, location);
}

for(ETST_Invoice_Lines_Activity__mdt activity : lstLinesActivity){
mapInvoiceLinesActivityCenter.put(activity.ETST_Activity_Center__c, activity);
}
for(Invoice__c inv : newInvoices){
ET_Invoice_Line_Item__c lineItem = new ET_Invoice_Line_Item__c();
lineItem.Service_Type__c = lineItemmdt.ET_ServiceType__c;
lineItem.Tax_Amount__c = Integer.ValueOf(lineItemmdt.ET_Tax_Amount__c);
lineItem.Tax_Code__c = lineItemmdt.ET_Tax_Code__c;
lineItem.Tax_Rate__c = Integer.valueOf(lineItemmdt.ET_Tax_Rate__c);
lineItem.Department__c = lineItemmdt.ET_Department__c;
lineitem.ET_Activity_Center__c = mapInvoiceLinesActivityCenter.get(inv.ETST_Activity_Center__c).ETST_Activity_Code__c;
lineItem.invoice__c = inv.Id;  
lineItem.ET_Line_Type__c = lineItemmdt.ET_LineType__c;
lineItem.Amount__c = inv.Total_Inv_Amount__c;
lineItem.ET_Service_Type__c = lineItemmdt.ET_ServiceType__c;
lstInvoiceLineItems.add(lineItem);
}
if(!lstInvoiceLineItems.isEmpty()){
insert lstInvoiceLineItems;
}
}  */ 
    public static void deleteSchoolRecord(List<Account> lstAccount){
        List<Id> accountIds = new List<Id>();
        for(Account acc : lstAccount){
            accountIds.add(acc.id);
        }
        if(!accountIds.isEmpty()){
            List<ETST_School__c> lstSchools = [Select Id from ETST_School__C WHERE Customer__c IN:accountIds];
            delete lstSchools;
        }
    }
    public static void changeCoordinatorLayout(Map<Id, ET_Service_Request__c> newMap, Map<Id, ET_Service_Request__c> oldMap){
        System.debug('Entered changeCoordinatorLayout');
        Id serviceReqRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Service_Request').getRecordTypeId();
        Id coordinatorPaymentRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator').getRecordTypeId();
        Id coordinatorReadOnlyRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator_Read_Only').getRecordTypeId();
        
        for(ET_Service_Request__c serviceReq : newMap.values()){
            if(serviceReq.ETST_Status__c!= oldMap.get(serviceReq.Id).ETST_Status__c){ // Added by Sreelakshmi SK -- 15-Mar-2023
                if(serviceReq.RecordTypeId==serviceReqRecordTypeId || serviceReq.RecordTypeId==coordinatorReadOnlyRecordTypeId || serviceReq.RecordTypeId==coordinatorPaymentRecordTypeId){
                    /*if(serviceReq.ETST_Status__c == System.label.ETST_Service_Confirmed && (oldMap.get(serviceReq.Id).ETST_Status__c == System.label.ETST_Under_Review || oldMap.get(serviceReq.Id).ETST_Status__c== System.label.ETST_Service_Status_Renewed
|| oldMap.get(serviceReq.Id).ETST_Status__c == System.label.ETST_Request_Rejected)){
if(serviceReq.ETST_Fare_Charges__c !=null && serviceReq.ETST_Fare_Charges__c !=0){
serviceReq.RecordTypeId = coordinatorPaymentRecordTypeId;
}
else{
serviceReq.RecordTypeId = coordinatorReadOnlyRecordTypeId;
}
} else if(serviceReq.ETST_Status__c == System.label.ETST_Payment_success || serviceReq.ETST_Status__c == System.label.ETST_Payment_Success_In_Review || 
serviceReq.ETST_Status__c == System.label.ETST_Request_Cancelled || serviceReq.ETST_Status__c == System.label.ETST_Parent_Cancelled){
serviceReq.RecordTypeId = coordinatorReadOnlyRecordTypeId;
} else{
serviceReq.RecordTypeId = serviceReqRecordTypeId;
}
}*/
                    if(serviceReq.ETST_Status__c == System.label.ETST_Service_Confirmed && serviceReq.ETST_Fare_Charges__c !=null && serviceReq.ETST_Fare_Charges__c !=0){
                        System.debug('--1---');
                        serviceReq.RecordTypeId = coordinatorPaymentRecordTypeId;
                    }else if (serviceReq.ETST_Status__c == System.label.ETST_Under_Review || serviceReq.ETST_Status__c == System.label.ETST_Location_Update){
                        serviceReq.RecordTypeId = serviceReqRecordTypeId;
                        System.debug('--2---');
                    }else{
                        System.debug('--3---');
                        serviceReq.RecordTypeId = coordinatorReadOnlyRecordTypeId;
                    }
                }
            }
            
        }
    }
    /*public class invoiceQuauable implements System.Queueable,Database.AllowsCallouts
{
List<Invoice__c> InvoiceList;
public invoiceQuauable(List<Invoice__c> InvoiceList) 
{
this.InvoiceList = InvoiceList;
}

public void execute(QueueableContext qc) 
{
Set<String> invSet = new Set<String>();

for(Invoice__c inv:InvoiceList)
{
invSet.add(inv.Id);
}

if(invSet.size() > 0) 
{
ETST_Global_Handler.invoiceEmailtoCustomer(invSet);//vfPage,sr.Id,sr.ET_Account__r.personcontactId,sr.ET_Account__r.personemail);

}
}
} */
    /*   
public static void onServiceReject(Map<Id, ET_Service_Request__c> newMap, Map<Id, ET_Service_Request__c> oldMap){
Id schoolServiceReqRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Service_Request').getRecordTypeId();
Id schoolCoordinatorPaymentRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator').getRecordTypeId();
Id schoolCoordinatorReadOnlyRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator_Read_Only').getRecordTypeId();
List<Id> serIds=new List<Id>();
for(ET_Service_Request__c serReq : newMap.values()){
if((serReq.recordtypeId == schoolServiceReqRecordTypeId || serReq.recordtypeId == schoolCoordinatorPaymentRecordTypeId || serReq.recordtypeId == schoolCoordinatorReadOnlyRecordTypeId)
&& serReq.ETST_Status__c  == System.label.ETST_Request_Rejected && oldMap.get(serReq.Id).ETST_Status__c!=serReq.ETST_Status__c){
serIds.add(serReq.ETST_Old_Service_Request__c);
}

}
List<ET_Service_Request__c> serviceRequests = new List<ET_Service_Request__c>();
for(ET_Service_Request__c serReq: [select id,ETST_Status__c,ETST_Is_Active__c from ET_Service_Request__c  
where Id IN: serIds]){
serReq.ETST_Is_Active__c=true;
serviceRequests.add(serReq);
}
try{
update serviceRequests;
}catch(Exception e){
System.debug('error '+e.getMessage());
}
}*/
    public static void sendInvoicetoParent(Map<Id, ET_Service_Request__c> newMap, Map<Id, ET_Service_Request__c> oldMap){
        Id schoolServiceReqRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Service_Request').getRecordTypeId();
        Id schoolCoordinatorPaymentRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator').getRecordTypeId();
        Id schoolCoordinatorReadOnlyRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator_Read_Only').getRecordTypeId();
        List<ET_Service_Request__c> serviceRequests = new List<ET_Service_Request__c>();
        for(ET_Service_Request__c serReq : newMap.values()){
            if((serReq.recordtypeId == schoolServiceReqRecordTypeId || serReq.recordtypeId == schoolCoordinatorPaymentRecordTypeId || serReq.recordtypeId == schoolCoordinatorReadOnlyRecordTypeId)
               && serReq.ETST_Status__c  == System.label.ETST_Service_Confirmed && oldMap.get(serReq.Id).ETST_Status__c!=serReq.ETST_Status__c)
                serviceRequests.add(serReq);
        }
        if(!serviceRequests.isEmpty()){
            String jsonString = json.serialize(serviceRequests);
            ETST_Global_Handler.invoiceEmailtoCustomer(jsonString);
        }        
    } 
    
    @future(callout=true)
    public static void invoiceEmailtoCustomer(String jsonString){
        List<ET_Service_Request__c> lstServiceRequests = (List<ET_Service_Request__c>)Json.deserialize(jsonString,List<ET_Service_Request__c>.class);
        string invRecordTypeId = Schema.SObjectType.Invoice__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Transport').getRecordTypeId(); 
        List<Invoice__c> invList =[select id,Name,Service_Request__c,Service_Request__r.Id,Service_Request__r.ET_Account__r.personemail,
                                   Service_Request__r.ET_Account__r.personcontactId
                                   FROM Invoice__c where Service_Request__c IN:lstServiceRequests AND RecordTypeId=:invRecordTypeId];
        String vfPage='ETST_InvoicePdf';
        List<Attachment> invoiceAttachments = new List<Attachment>();
        List<Messaging.SingleEmailMessage> mails = new List<Messaging.SingleEmailMessage>();
        //(String vfPage,String parentId,Id tragetId,String emailId){
        //sr.Id,sr.ET_Account__r.personcontactId,sr.ET_Account__r.personemail);
        if(!invList.isEmpty()){
            for(Invoice__c inv :invList){
                PageReference pdf = Page.ETST_InvoicePdf;//new PageReference('/apex/ETST_InvoicePage');
                pdf.setRedirect(true); 
                pdf.getParameters().put('id',inv.Service_Request__r.Id);            
                Blob pdfContent; 
                try {               
                    // returns the output of the page as a PDF
                    pdfContent = pdf.getContent();
                    // need to pass unit test
                } catch (VisualforceException e) {
                    pdfContent = Blob.valueOf('Some Text');
                }
                // string fileName=vfPage+'.pdf';  
                string fileName=inv.Name+'.pdf';
                /*Messaging.EmailFileAttachment att = new Messaging.EmailFileAttachment();
att.setFileName(fileName);
att.setBody(pdfContent);
att.setContentType('application/pdf'); */     
                Attachment attach = new Attachment();
                attach.name = fileName;
                attach.Body = pdfContent;
                attach.ParentId = inv.Id;
                /*List<string> toAddress = new List<string>(); 
toAddress.add(inv.Service_Request__r.ET_Account__r.personemail); 
EmailTemplate et = [Select Id,Subject, Body from EmailTemplate where developerName = 'ETST_Invoice_Email_Template'];            
OrgWideEmailAddress[] owea = [select Id from OrgWideEmailAddress where Address = :System.Label.orgWideEmail];

Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();  
if ( owea.size() > 0 ) {
mail.setOrgWideEmailAddressId(owea.get(0).Id);
}
mail.setTemplateId(et.Id);        
mail.setSaveAsActivity(false);
mail.setTreatTargetObjectAsRecipient(false);//Not to send the email to target guest if email is edited
mail.setTargetObjectId(inv.Service_Request__r.ET_Account__r.personcontactId); 
// mail.setWhatId(inv.Service_Request__r.ET_Account__c);
mail.setToAddresses(toAddress);
mail.setFileAttachments(new Messaging.EmailFileAttachment[] {att});
//mail.setReplyTo(q.Opportunity.account.personEmail);
// mail.setSenderDisplayName(currentUser.FirstName +' '+currentUser.LastName+'-'+currentUser.Contact.Account.Name);
mails.add(mail);*/
                invoiceAttachments.add(attach);
            }
        }
        if(!invoiceAttachments.isEmpty()){
            if(!system.Test.isRunningTest()){
                // Messaging.SendEmailResult [] results = Messaging.sendEmail(mails);  
                //System.debug('results-->'+results); 
                insert invoiceAttachments;
            }
        }
    }
    
    public static void processReceiptForPayment(Map<Id,ETST_Payment__c> newMap, Map<Id, ETST_Payment__c> oldMap){
        Set<Id> serviceIds = new Set<Id>();    
        List<ET_Receipt__c> receipts = new List<ET_Receipt__c>();
        //Create Receipt for only those payments of type online and offline on Create and Update
        for(ETST_Payment__c payment: newMap.values()){
            system.debug('payment***'+payment);
            if(payment.ETST_Payment_State__c == ET_Common_Util.PAYMENT_CAPTURED && (oldMap == null || oldMap.get(payment.Id).ETST_Payment_State__c != payment.ETST_Payment_State__c)){ 
                // (payment.ETST_Payment_Mode__c.toLowerCase() == ET_Common_Util.PAYMENT_ONLINE_TYPE.toLowerCase())){
                if(payment.ET_Service_Request__c !=null){
                    serviceIds.add(payment.Id);
                }   
            }
        }
        if(serviceIds.size()>0){
            Id schoolRecordTypeId =Schema.SObjectType.ET_Receipt__c.getRecordTypeInfosByDeveloperName().get('ET_School_Transport').getRecordTypeId();
            string serviceReqRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Service_Request').getRecordTypeId();
            string coordinatorPaymentRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator').getRecordTypeId();
            string coordinatorReadOnlyRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator_Read_Only').getRecordTypeId();
            Set<String> recordtypeIds = new Set<String>(); 
            recordtypeIds.add(serviceReqRecordTypeId); 
            recordtypeIds.add(coordinatorPaymentRecordTypeId); 
            recordtypeIds.add(coordinatorReadOnlyRecordTypeId);  
            /*  List<ET_Service_Request__c> services = [SELECT Id, Name,ET_Account__c,ETST_Fare_Charges__c,ETST_Parent__r.Name,ETST_Student__c,ETST_Student__r.ETST_School__r.ETST_Coordinator__c
FROM ET_Service_Request__c where Id in:serviceIds]; */
            List<ETST_Payment__c> paymentList = [Select Id,Name,ETST_Payment_Mode__c,ETST_Fare_Charges__c,ET_Service_Request__c,ET_Service_Request__r.RecordTypeId,ET_Service_Request__r.ETST_Student__r.ETST_School__r.ETST_Coordinator__c
                                                 FROM ETST_Payment__c WHERE Id IN:serviceIds];
            if(paymentList !=null && paymentList.size()>0){
                for(ETST_Payment__c payment: paymentList){
                    if(recordtypeIds.Contains(payment.ET_Service_Request__r.RecordTypeId)){
                        ET_Receipt__c receipt = new ET_Receipt__c();
                        receipt.ET_Coordinator__c = payment.ET_Service_Request__r.ETST_Student__r.ETST_School__r.ETST_Coordinator__c;
                        receipt.ET_Service_Request__c = payment.ET_Service_Request__c;
                        receipt.Payment_Mode__c = payment.ETST_Payment_Mode__c;
                        receipt.RecordTypeId = schoolRecordTypeId;
                        receipt.ET_Payment__c=payment.Id;
                        if(payment.ETST_Fare_Charges__c!=null)
                        {
                            receipt.ET_Amount__c = payment.ETST_Fare_Charges__c;
                            //  receipt.Auth_Code__c = servicePaymentMap.get(service.Id)[0].ETST_AuthorizationCode__c;
                        }
                        receipts.add(receipt);
                    }
                }      
            }
            if(receipts.size()>0) insert receipts;
        }
    }
    
    @future(callout=true)
    public static void receiptEmailtoCustomer(String jsonString){
        List<ET_Receipt__c> lstReceipts = (List<ET_Receipt__c>)Json.deserialize(jsonString,List<ET_Receipt__c>.class);
        string schoolRecordTypeId = Schema.SObjectType.ET_Receipt__c.getRecordTypeInfosByDeveloperName().get('ET_School_Transport').getRecordTypeId(); 
        List<ET_Receipt__c> receiptList =[Select id,Name,ET_Service_Request__c,ET_Service_Request__r.Id,ET_Service_Request__r.ET_Account__r.personemail,
                                          ET_Service_Request__r.ET_Account__r.personcontactId,ET_Payment__c FROM ET_Receipt__c 
                                          where Id IN:lstReceipts AND RecordTypeId=:schoolRecordTypeId];
        String vfPage='ETST_ReceiptPage';
        List<Attachment> receiptsAttachments = new List<Attachment>();
        List<Messaging.SingleEmailMessage> mails = new List<Messaging.SingleEmailMessage>();
        //(String vfPage,String parentId,Id tragetId,String emailId){
        //sr.Id,sr.ET_Account__r.personcontactId,sr.ET_Account__r.personemail);
        if(!receiptList.isEmpty()){
            for(ET_Receipt__c receipt :receiptList){
                PageReference pdf = Page.ETST_ReceiptPage;//new PageReference('/apex/ETST_ReceiptPage');
                pdf.setRedirect(true); 
                pdf.getParameters().put('id',receipt.ET_Service_Request__r.Id);            
                Blob pdfContent; 
                try {               
                    // returns the output of the page as a PDF
                    pdfContent = pdf.getContent();
                    // need to pass unit test
                } catch (VisualforceException e) {
                    pdfContent = Blob.valueOf('Some Text');
                }
                // string fileName=vfPage+'.pdf';  
                string fileName=receipt.Name+'.pdf';
                Messaging.EmailFileAttachment att = new Messaging.EmailFileAttachment();
                att.setFileName(fileName);
                att.setBody(pdfContent);
                att.setContentType('application/pdf');      
                Attachment attach = new Attachment();
                attach.name = fileName;
                attach.Body = pdfContent;
                attach.ParentId = receipt.Id;
                List<string> toAddress = new List<string>(); 
                toAddress.add(receipt.ET_Service_Request__r.ET_Account__r.personemail); 
                EmailTemplate et = [Select Id,Subject, Body from EmailTemplate where developerName = 'ETST_Receipt_Email_Template'];            
                OrgWideEmailAddress[] owea = [select Id from OrgWideEmailAddress where Address = :System.Label.orgWideEmail];
                
                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();  
                if ( owea.size() > 0 ) {
                    mail.setOrgWideEmailAddressId(owea.get(0).Id);
                }
                mail.setTemplateId(et.Id);        
                mail.setSaveAsActivity(false);
                mail.setTreatTargetObjectAsRecipient(false);//Not to send the email to target guest if email is edited
                mail.setTargetObjectId(receipt.ET_Service_Request__r.ET_Account__r.personcontactId); 
                // mail.setWhatId(inv.Service_Request__r.ET_Account__c);
                mail.setToAddresses(toAddress);
                mail.setFileAttachments(new Messaging.EmailFileAttachment[] {att});
                //mail.setReplyTo(q.Opportunity.account.personEmail);
                // mail.setSenderDisplayName(currentUser.FirstName +' '+currentUser.LastName+'-'+currentUser.Contact.Account.Name);
                mails.add(mail);
                receiptsAttachments.add(attach);
            }
        }
        if(!mails.isEmpty()){
            if(!system.Test.isRunningTest()){
                Messaging.SendEmailResult [] results = Messaging.sendEmail(mails);  
                System.debug('results-->'+results); 
                insert receiptsAttachments;
            }
        }
    }
    
    public static void createKPIOnServiceRequestStatusChange(Map<Id,ET_Service_Request__c> newMap, Map<Id,ET_Service_Request__c> oldMap){ 
        Set<Id> appIds = new Set<Id>();
        List<ET_KPIReqParam> KPIParamList = new List<ET_KPIReqParam>();
        List<ET_KPI_Request__c> listKPIFareRequests = new List<ET_KPI_Request__c>();
        List<ET_KPI_Request__c> listKPIPickupStartRequests = new List<ET_KPI_Request__c>();
        List<ET_KPI_Request__c> listKPIPickupEndRequests = new List<ET_KPI_Request__c>();
        for(ET_Service_Request__c request: newMap.values()){
            if(oldMap == null || oldMap.get(request.Id).ETST_Status__c != newMap.get(request.Id).ETST_Status__c){
                ET_KPIReqParam param = new ET_KPIReqParam();
                param.Id = request.Id;
                param.status = newMap.get(request.Id).ETST_Status__c;
                System.debug('Param status: '+param.status);
                KPIParamList.add(param);
            }
            if(oldMap != null && oldMap.get(request.Id).ETST_Fare_Charges__c != newMap.get(request.Id).ETST_Fare_Charges__c){
                ET_KPI_Request__c kpiReq  = new ET_KPI_Request__c();
                kpiReq.ETST_Previous_Fare__c = oldMap.get(request.Id).ETST_Fare_Charges__c;
                kpiReq.ETST_Current_Fare__c = request.ETST_Fare_Charges__c;
                kpiReq.ET_Service_Request__c = request.Id;
                listKPIFareRequests.add(kpiReq);
            } 
            if(oldMap != null && oldMap.get(request.Id).ETST_Pick_Up_Start_Date__c != newMap.get(request.Id).ETST_Pick_Up_Start_Date__c){
                ET_KPI_Request__c kpiReq  = new ET_KPI_Request__c();
                kpiReq.ETST_Previous_Pickup_Start_Date__c = oldMap.get(request.Id).ETST_Pick_Up_Start_Date__c;
                kpiReq.ETST_Current_Pickup_Start_Date__c = request.ETST_Pick_Up_Start_Date__c;
                kpiReq.ET_Service_Request__c = request.Id;
                listKPIPickupStartRequests.add(kpiReq);
            }
            if(oldMap != null && oldMap.get(request.Id).ETST_Pick_Up_End_Date__c != newMap.get(request.Id).ETST_Pick_Up_End_Date__c){
                ET_KPI_Request__c kpiReq  = new ET_KPI_Request__c();
                kpiReq.ETST_Previous_Pickup_End_Date__c = oldMap.get(request.Id).ETST_Pick_Up_End_Date__c;
                kpiReq.ETST_Current_Pickup_End_Date__c = request.ETST_Pick_Up_End_Date__c;
                kpiReq.ET_Service_Request__c = request.Id;
                listKPIPickupEndRequests.add(kpiReq);
            }
            if(oldMap != null && oldMap.get(request.Id).ETST_Pick_Up_From__c != newMap.get(request.Id).ETST_Pick_Up_From__c){
                ET_KPI_Request__c kpiReq  = new ET_KPI_Request__c();
                kpiReq.ETST_Previous_Pickup_From__c = oldMap.get(request.Id).ETST_Pick_Up_From__c;
                kpiReq.ETST_Current_Pickup_From__c = request.ETST_Pick_Up_From__c;
                kpiReq.ET_Service_Request__c = request.Id;
                listKPIPickupEndRequests.add(kpiReq);
            }
            if(oldMap != null && oldMap.get(request.Id).ETST_Drop_Off_To__c != newMap.get(request.Id).ETST_Drop_Off_To__c){
                ET_KPI_Request__c kpiReq  = new ET_KPI_Request__c();
                kpiReq.ETST_Previous_DropOff__c = oldMap.get(request.Id).ETST_Drop_Off_To__c;
                kpiReq.ETST_New_DropOff__c = request.ETST_Drop_Off_To__c;
                kpiReq.ET_Service_Request__c = request.Id;
                listKPIPickupEndRequests.add(kpiReq);
            }
        }
        if(KPIParamList.size() > 0){
            ET_KPIRequestGeneration.createKPIRequest(KPIParamList,'ET_Service_Request__c');
        }
        if(listKPIFareRequests.size()>0){
            insert listKPIFareRequests;
        }
        if(listKPIPickupStartRequests.size()>0){
            insert listKPIPickupStartRequests;
        }
        if(listKPIPickupEndRequests.size()>0){
            insert listKPIPickupEndRequests;
        }
    }
    public static void updateInvoiceAmount(Map<Id, ET_Service_Request__c> newMap, Map<Id,ET_Service_Request__c> oldMap){
        List<Invoice__c> updateInvList=new List<Invoice__c>();
        set<Id> srIds=new set<Id>();
        Id schoolServiceReqRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Service_Request').getRecordTypeId();
        Id schoolCoordinatorPaymentRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator').getRecordTypeId();
        Id schoolCoordinatorReadOnlyRecordTypeId = Schema.SObjectType.ET_Service_Request__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Coordinator_Read_Only').getRecordTypeId();
        Id invRecordTypeId = Schema.SObjectType.Invoice__c.getRecordTypeInfosByDeveloperName().get('ETST_School_Transport').getRecordTypeId();
        if((schoolServiceReqRecordTypeId !=null || schoolCoordinatorPaymentRecordTypeId !=null || schoolCoordinatorReadOnlyRecordTypeId !=null) && invRecordTypeId!=null){
            for(ET_Service_Request__c sr:newMap.values()){
                if((sr.recordTypeId==schoolServiceReqRecordTypeId || sr.recordTypeId==schoolCoordinatorPaymentRecordTypeId || sr.recordTypeId==schoolCoordinatorReadOnlyRecordTypeId) && newMap.get(sr.Id).ETST_Fare_Charges__c != oldMap.get(sr.Id).ETST_Fare_Charges__c && sr.ETST_Is_Active__c == true)
                    srIds.add(sr.Id);
            }
            if(!srIds.isEmpty()){
                for(Invoice__c inv: [SELECT Id,Total_Inv_Amount__c,Service_Request__c,Service_Request__r.ETST_Fare_Charges__c FROM Invoice__c Where Service_Request__c IN:srIds AND ETST_Active__c=true order by createdDate desc]){
                    inv.Id=inv.Id;
                    if(inv.Service_Request__r.ETST_Fare_Charges__c !=null && inv.Total_Inv_Amount__c != inv.service_Request__r.ETST_Fare_Charges__c){
                        inv.Total_Inv_Amount__c = inv.Service_Request__r.ETST_Fare_Charges__c;
                        updateInvList.add(inv);
                    }
                }
            }
            system.debug('updateInvList>> '+updateInvList);
            If(!updateInvList.isEmpty())
                update updateInvList;
        }
    }
    
    public static void magicmethod(){
        integer i = 0;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}