public without sharing class ET_SaveCombinationCntrl {
    
    public ET_SaveCombinationCntrl() {
        
    }
    
    @AuraEnabled
    public static combinationWrapper fetchExistingCombinations(Id serviceRequestId){
        try{
            ET_Pricing_Service_Request__c request =   [Select id, 
                                                  		ET_Accountant_Pricing_Choice__c,
                                                  		ET_Coordinator_Pricing_Choice__c,
                                                  		ET_Supervisor_Pricing_Choice__c,
                                                        ET_Other_Employee_Pricing_Choice__c,
                                                        (Select 
                                                            ET_Accountant_Unique_Key__c, 
                                                            ET_Coordinator_Unique_Key__c,
                                                            ET_Driver_Unique_Id__c,
                                                            ET_Nanny_Unique_Key__c,
                                                            ET_Supervisor_Unique_Key__c,
                                                            ET_Vehicle_Unique_key__c,
                                                            ET_Number_of_Accountants__c,
                                                            ET_Number_of_Coordinators__c,
                                                            ET_Number_of_Drivers__c,
                                                            ET_Number_of_Nannies__c,
                                                            ET_Number_of_Other_Employees__c,
                                                            ET_Number_of_Supervisors__c,
                                                            ET_Number_of_Vehicles__c,
                                                            ET_Other_Employee_Unique_Key__c 
                                                         from Request_Mapping__r)
                                                        
                                                from 	ET_Pricing_Service_Request__c
                                                where 	id =: serviceRequestId];
            if(request.Request_Mapping__r != null && request.Request_Mapping__r.size() > 0){
                
                combinationWrapper wrapperObj = new combinationWrapper();
                wrapperObj.combinations = request.Request_Mapping__r;
                if(request.ET_Accountant_Pricing_Choice__c != null){
                    wrapperObj.accountantPricingChoice = request.ET_Accountant_Pricing_Choice__c;
                }
                if(request.ET_Coordinator_Pricing_Choice__c != null){
                    wrapperObj.coordinatorPricingChoice = request.ET_Coordinator_Pricing_Choice__c;
                }
                if(request.ET_Supervisor_Pricing_Choice__c != null){
                    wrapperObj.supervisorPricingChoice = request.ET_Supervisor_Pricing_Choice__c;
                }
                if(request.ET_Other_Employee_Pricing_Choice__c != null){
                    wrapperObj.otherEmployeePricingChoice = request.ET_Other_Employee_Pricing_Choice__c;
                }
                
                return wrapperObj;
            }
            return null;
        }catch(Exception ex){
            system.debug(ex.getMessage());
            return null;
        } 
    }
    
    
    
    @AuraEnabled
    public static vehAndManpowerCombinationWrappper getvehAndManpowerCombinataions(Id serviceRequestId){
        vehAndManpowerCombinationWrappper wrpp = new vehAndManpowerCombinationWrappper();
        List<Vehicle__c> vehReqList = new List<Vehicle__c>();
        List<ET_Work_force__c> workForReqList = new List<ET_Work_force__c>();
        ET_Pricing_Service_Request__c serReq = [select id,
                                                (select id,ET_Vehicle_MAKE__c,ET_Vehicle_Model__c,ET_Vehicle_Model_Year__c,ET_Vehicle_Line__c,
                                                 ET_Service_Type__c,ET_Vehicle_Quantity__c
                                                 from Vehicle_Requests__r), 
                                                (select id, ET_Driver_Category__c, ET_Nanny_Category__c,ET_Workforce_Record_Type_Name__c,
                                                 ET_Workforce_Line_Info__c, ET_Service_Type__c ,ET_No_of_Drivers__c , ET_Number_of_Nannies__c,
                                                 Type__c
                                                 from Work_force_Requests__r where Type__c = 'Main')
                                                from ET_Pricing_Service_Request__c where id =:serviceRequestId];
        
        system.debug('serReq  = '+ JSON.serializePretty(serReq));
        
        if(serReq.Vehicle_Requests__r != null && serReq.Vehicle_Requests__r.size() > 0){
            vehReqList = serReq.Vehicle_Requests__r;
        }
        if(serReq.Work_force_Requests__r != null && serReq.Work_force_Requests__r.size() > 0){
            workForReqList = serReq.Work_force_Requests__r;
        }
        
        if(vehReqList != null && vehReqList.size() > 0){
            for(Vehicle__c vehReq : vehReqList){
                String keyy = vehReq.ET_Vehicle_MAKE__c+'_'+vehReq.ET_Vehicle_Model__c + '_'+vehReq.ET_Vehicle_Model_Year__c+ '=>'+ vehReq.ET_Vehicle_Line__c;
                wrpp.vehicleInfo.put(keyy , vehReq.ET_Vehicle_Quantity__c);
                wrpp.vehicleServiceInfo.put(keyy , vehReq.ET_Service_Type__c);
            }
        }
        
        if(workForReqList != null && workForReqList.size() > 0){
            for(ET_Work_force__c wForceReq : workForReqList){
                if(wForceReq.ET_Workforce_Record_Type_Name__c == 'ET_Driver'){
                    String keyy = wForceReq.ET_Driver_Category__c+'=>'+ wForceReq.ET_Workforce_Line_Info__c.split(':')[1];
                    wrpp.driverInfo.put(keyy , wForceReq.ET_No_of_Drivers__c);
                    wrpp.driverServiceInfo.put(keyy , wForceReq.ET_Service_Type__c);
                }
                if(wForceReq.ET_Workforce_Record_Type_Name__c == 'ET_Nanny'){
                    String keyy = wForceReq.ET_Nanny_Category__c+'=>'+ wForceReq.ET_Workforce_Line_Info__c.split(':')[1];
                    wrpp.nannyInfo.put(keyy , wForceReq.ET_Number_of_Nannies__c);
                    wrpp.nannyServiceInfo.put(keyy , wForceReq.ET_Service_Type__c);
                }
            }
        } 
        
        system.debug('wrpp = '+ JSON.serializePretty(wrpp));
        return wrpp;
         
    }
    
    
    // Wrapper class to send Vehicle and manpower requests to client side..
    public class vehAndManpowerCombinationWrappper{
        @AuraEnabled
        public map<String, decimal> vehicleInfo = new map<String, decimal>();
        @AuraEnabled
        public map<String, String> vehicleServiceInfo = new map<String, String>();
        @AuraEnabled
        public map<String, decimal> driverInfo = new map<String, decimal>();
        @AuraEnabled
        public map<String, String> driverServiceInfo = new map<String, String>();
        @AuraEnabled
        public map<String, decimal> nannyInfo = new map<String, decimal>();
        @AuraEnabled
        public map<String, String> nannyServiceInfo = new map<String, String>();
        
    }
    
    
    
    
    
    @AuraEnabled
    public static void saveCombinationsToDatabase(Map<String,Object> combinationMap, Id serviceRequestId){
        List<Sobject> objToInserLst = new List<SObject>();
        //ET_Pricing_Service_Request__c request = [select id, ET_Supervisor_Pricing_Choice__c, ET_Accountant_Pricing_Choice__c, ET_Coordinator_Pricing_Choice__c from ]
        ET_Pricing_Service_Request__c request = new ET_Pricing_Service_Request__c(id = serviceRequestId);
        if(combinationMap.get('coordinatorPricingChoice') != null){
            request.ET_Coordinator_Pricing_Choice__c = (String)combinationMap.get('coordinatorPricingChoice');
        }
        if(combinationMap.get('accountantPricingChoice') != null){
            request.ET_Accountant_Pricing_Choice__c = (String)combinationMap.get('accountantPricingChoice');
        }
        if(combinationMap.get('supervisorPricingChoice') != null){
            request.ET_Supervisor_Pricing_Choice__c = (String)combinationMap.get('supervisorPricingChoice');
        }
        if(combinationMap.get('otherEmployeePricingChoice') != null){
            request.ET_Other_Employee_Pricing_Choice__c = (String)combinationMap.get('otherEmployeePricingChoice');
        }
        List<ET_Request_Mapping__c> combinationsToDelete = new List<ET_Request_Mapping__c>();
        if(combinationMap.get('CombinationsToDelete') != null){
            
            for(Object idObj : (List<Object>)combinationMap.get('CombinationsToDelete')){
                String idStr = (String)idObj;
                ET_Request_Mapping__c combination = new ET_Request_Mapping__c(id = idStr);
                combinationsToDelete.add(combination);
            }
        }
       
        if(combinationMap.get('mappingData') != null){
            for (Object instance : (List<Object>)combinationMap.get('mappingData')){
                Map<Object, Object> mappingObjMap = (Map<Object, Object>)instance;
                if(mappingObjMap.get('sObjectType') != null){
                    String typeStr = (String)mappingObjMap.get('sObjectType');
                    SObject obj = (ET_Request_Mapping__c)Type.forName(typeStr).newInstance();
                    for(Object key : mappingObjMap.keyset()){
                        String keyStr = (String)key;
                        if(keyStr != 'sObjectType'){
                            if(keyStr.contains('Number')){
                                obj.put(keyStr, Integer.valueOf(mappingObjMap.get(keyStr)));  
                            }else{
                                obj.put(keyStr, String.valueOf(mappingObjMap.get(keyStr)));  
                            }
                            
                        }
                    }
                    system.debug('service request id :'+serviceRequestId);
                    obj.put('ET_Pricing_Service_Request__c',serviceRequestId);
                    objToInserLst.add(obj);
                }
                
            }
        }
        
        try{
            	delete combinationsToDelete;
                insert objToInserLst;
            	update request; 
            }catch(Exception e){
                system.debug(e.getMessage());
            }
     }
    
    public class combinationWrapper{
        @AuraEnabled
        public String coordinatorPricingChoice;
        @AuraEnabled
        public String accountantPricingChoice;
        @AuraEnabled
        public String supervisorPricingChoice;
        @AuraEnabled
        public String otherEmployeePricingChoice;
        @AuraEnabled
        public List<ET_Request_Mapping__c> combinations;
    }
    
  
}