/***
Class       : ET_ContractController
Author      : Karamat Ali
Description : 
TestClass  : 
----------------------------------------------------------------------------------------------------------------
-- History --
----------------------------------------------------------------------------------------------------------------
Sr.No.  version_DevInitials     Date                Details
1.          V1.0              20/03/24           Initial Version 
****************************************************************************************************************/
public class ET_ContractController {    
    
    @AuraEnabled 
    public static void createContractLines(list<ET_Sales_Agreement_Sub_Line_Item__c> contractLines){   
        try{
            System.debug('---createContractLines---'+contractLines);
            insert contractLines;
            
        } catch(dmlexception e){
            system.debug('Error inserting: ' + e);
            throw new AuraHandledException('System Error'+e);
        }
    }

    @AuraEnabled 
    public static Map<String, Object> sendSalesAgreementToERP(string saId){        
        ET_Oracle_REST_Endpoints__mdt connection = ET_REST_Authorize_Helper.getSOAPEndpointFromMetadata('createSalesAgreement');
        Blob beforeblob = Blob.valueOf(connection.Username__c+':'+connection.Password__c);
        string paramvalue = EncodingUtil.base64Encode(beforeblob);
        
        ET_Sales_Agreement__c sa = getSalesAgreemnetDetail(saId);
        String jsonData = buildJson(sa);

        HttpRequest request = new HttpRequest();
    
        if(ET_REST_Authorize_Helper.runningInASandbox()){
            request.setEndpoint(connection.Dev_Endpoint__c);
            
        }else{
            request.setEndpoint(connection.LiveEndpoint_c__c);
        }  
        request.setMethod('POST');
        request.setTimeout(120000);
        request.setHeader('Content-Type', 'application/json');
        request.setBody(jsonData);      
        request.setHeader('Authorization','Basic '+paramvalue);   
        Http http = new Http();
        HttpResponse response = http.send(request);
        system.debug('response.getBody'+response.getBody());
        Map<String, Object> result = (Map<String, Object>)JSON.deserializeUntyped(response.getBody());
        updateSalesAgreement(response, result, sa);
        return result;
    }

    public static String buildJson(ET_Sales_Agreement__c sa){
        Integer i=1;
        
        List<TermsAndCondition__c> terms = getTermsAndCondition(sa.ETSALES_Customer_Quote__c);
        System.debug('-----terms-----'+terms);
        JSONGenerator gen = JSON.createGenerator(true);
        gen.writeStartObject();
            //ContractHeader Info
            gen.writeStringField('CustomerId','2250124');
            gen.writeStringField('CustomerNumber',sa.Salesforce_Customer__r.AccountNumber==null?'':sa.Salesforce_Customer__r.AccountNumber);
            gen.writeStringField('CustomerPO',sa.Customer_PO_No__c==null?'':sa.Customer_PO_No__c); 
            gen.writeStringField('SalesAgreementName',sa.Name==null?'':sa.Name); 
            gen.writeStringField('ContractType',sa.Sales_Agreement_Type__c==null?'':sa.Sales_Agreement_Type__c);
            // gen.writeStringField('AgreementTypeId',sa.Agreement_Type__r.Agreement_Id__c==null?'':sa.Agreement_Type__r.Agreement_Id__c);
            gen.writeStringField('AgreementTypeId','1301'); 
            gen.writeStringField('StartDate',string.valueOf(sa.Contract_Start_Date__c==null?null:sa.Contract_Start_Date__c)); 
            gen.writeStringField('EndDate',string.valueOf(sa.Contract_End_Date__c==null?null:sa.Contract_End_Date__c));
            gen.writeStringField('Location',sa.ETSALES_Opportunity__r.GL_Location_Lookup__r.Location_Code__c==null?'':sa.ETSALES_Opportunity__r.GL_Location_Lookup__r.Location_Code__c);
            gen.writeStringField('Activity',sa.ETSALES_Opportunity__r.GL_Activity_Lookup__r.GL_Activity_Code__c==null?'':sa.ETSALES_Opportunity__r.GL_Activity_Lookup__r.GL_Activity_Code__c);
            gen.writeStringField('Sector',sa.ETSALES_Opportunity__r.GL_Project_Code_Lookup__r.Project_Code__c==null?'':sa.ETSALES_Opportunity__r.GL_Project_Code_Lookup__r.Project_Code__c);
            gen.writeStringField('AutoInvoice',sa.Auto_Invoice__c==null?'':sa.Auto_Invoice__c);
            gen.writeStringField('RoundDecimalValue',sa.Round_Decimal__c==null?'':string.valueOf(sa.Round_Decimal__c));
            gen.writeStringField('Reference', string.valueOf(sa.Id)); 
            gen.writeStringField('SalesforceId', string.valueOf(sa.Id));
            gen.writeStringField('ContractPayMode', string.valueOf(sa.Contract_Payment_Type__c)); 
            gen.writeStringField('TypeOfService', string.valueOf(sa.Id));
            gen.writeStringField('DriverOTAllowed', string.valueOf(sa.Driver_OT_Allowed__c)); 
            gen.writeStringField('MaxDriverOT', string.valueOf(sa.Max_Driver_OT__c));
            gen.writeStringField('AdministrationCharges', string.valueOf(sa.Administration_Charges__c)); 
            gen.writeStringField('PrematureCharges', string.valueOf(sa.Premature_Charges__c)); 
            gen.writeStringField('ServiceContractRule', string.valueOf(sa.Service_Contract_Rule__c));
            gen.writeStringField('ContractRenewalDate',string.valueOf(sa.Contract_Renewal_Date__c==null?null:sa.Contract_Renewal_Date__c));
            gen.writeStringField('MobilizationDate',string.valueOf(sa.Mobilization_Date__c==null?null:sa.Mobilization_Date__c));
            gen.writeStringField('LetterOfAwardDate',string.valueOf(sa.Letter_Of_Award_Date__c==null?null:sa.Letter_Of_Award_Date__c));
            gen.writeStringField('POFromCustomerDate',string.valueOf(sa.PO_From_Customer_Date__c==null?null:sa.PO_From_Customer_Date__c));
            gen.writeStringField('CustomerComplaints',string.valueOf(sa.Customer_Complaints__c));
            gen.writeStringField('IsSingleInvoice',string.valueOf(sa.Is_Single_Invoice__c));
            gen.writeStringField('FineCustomerEmail',string.valueOf(sa.Fine_Customer_Email__c));
            gen.writeStringField('InvoicingCollectionEmail',string.valueOf(sa.Invoicing_Collection_Email__c));
        
            //Lines Info
            gen.writeFieldName('ContractLines');
            gen.writeStartArray();
                for(ET_Sales_Agreement_Sub_Line_Item__c line : sa.Sales_Agreement_Sub_Line_Items__r){
                    gen.writeStartObject();
                        gen.writeStringField('LineNumber',string.valueOf(line.Line_Number__c)); 
                        gen.writeStringField('Item',line.Item__r.Name==null?'':line.Item__r.Name); 
                        gen.writeStringField('StartDateTime',line.Contract_Start_Date__c==null?'':string.valueOf(line.Contract_Start_Date__c.formatGMT('yyyy-MM-dd\'T\'HH:mm:ss')));
                        gen.writeStringField('EndDateTime',line.Contract_End_Date__c==null?'':string.valueOf(line.Contract_End_Date__c.formatGMT('yyyy-MM-dd\'T\'HH:mm:ss'))); 
                        gen.writeStringField('EffectiveStartDateTime',line.Effective_Date__c==null?'':string.valueOf(line.Effective_Date__c.formatGMT('yyyy-MM-dd\'T\'HH:mm:ss'))); 
                        gen.writeStringField('Saturday',line.Saturday__c?'Y':'N');             
                        gen.writeStringField('Sunday',line.Sunday__c?'Y':'N'); 
                        gen.writeStringField('Monday',line.Monday__c?'Y':'N');             
                        gen.writeStringField('Tuesday',line.Tuesday__c?'Y':'N'); 
                        gen.writeStringField('Wednesday',line.Wednesday__c?'Y':'N');           
                        gen.writeStringField('Thursday',line.Thursday__c?'Y':'N'); 
                        gen.writeStringField('Friday',line.Friday__c?'Y':'N');            
                        gen.writeStringField('NoOfDays',line.No_Of_Days__c==null?'':string.valueOf(line.No_Of_Days__c)); 
                        gen.writeStringField('NoOfVehiclesEmployees',line.No_of_Vehicles_Employee__c==null?'':string.valueOf(line.No_of_Vehicles_Employee__c));
                        gen.writeStringField('RateType',line.Rate_Type__c==null?'':line.Rate_Type__c); 
                        gen.writeStringField('AmountToBeCalculated',line.Amount_Calcualted__c==null?'':string.valueOf(line.Amount_Calcualted__c)); 
                        gen.writeStringField('RatePerDay',line.Rate_Day__c==null?'':string.valueOf(line.Rate_Day__c));
                        gen.writeStringField('LineAmount',line.Line_Amount__c==null?'':string.valueOf(line.Line_Amount__c)); 
                        gen.writeStringField('HoursPerDay',line.Hours_per_Day__c==null?'':string.valueOf(line.Hours_per_Day__c)); 
                        gen.writeStringField('KmPerDay',line.KM_per_Day__c==null?'':string.valueOf(line.KM_per_Day__c));             
                        gen.writeStringField('ExcessKm',line.Excess_Km__c==null?'':string.valueOf(line.Excess_Km__c)); 
                        gen.writeStringField('ExcessHours',line.Excess_Hours__c==null?'':string.valueOf(line.Excess_Hours__c));             
                        gen.writeStringField('AllowSecondary',line.Allow_Secondary__c?'Y':'N'); 
                        gen.writeStringField('Route',line.Route__r.Route_Id__c==null?'':line.Route__r.Route_Id__c);           
                        gen.writeStringField('Option',line.Option__r.Name==null?'':line.Option__r.Name); 
                        gen.writeStringField('Service',line.Service_Type__r.Service_Code__c==null?'':line.Service_Type__r.Service_Code__c);            
                        gen.writeStringField('Remarks',line.Remarks__c==null?'':line.Remarks__c); 
                        gen.writeStringField('FuelIncluded',line.Fuel_Included__c==null?'':line.Fuel_Included__c); 
                        gen.writeStringField('FuelCollectionBasis',line.Fuel_Collection_Basis__c==null?'':line.Fuel_Collection_Basis__c);           
                        gen.writeStringField('TollIncluded',line.Toll_Included__c==null?'':line.Toll_Included__c); 
                        gen.writeStringField('TollCollectionBasis',line.Toll_Collection_Basis__c==null?'':line.Toll_Collection_Basis__c);            
                        gen.writeStringField('TollCollectionFees',line.Toll_Collection_Fee__c==null?'':string.valueOf(line.Toll_Collection_Fee__c)); 
                        gen.writeStringField('TrafficFineFees',line.Traffic_Fine__c==null?'':string.valueOf(line.Traffic_Fine__c)); 
                        gen.writeStringField('FuelCollectionFees',''); 
                        gen.writeStringField('FixedOTCharges',''); 
                    gen.writeEndObject();
                    i++;
                }
            gen.writeEndArray();

            //Terms Info
            gen.writeFieldName('TermDetails');
            gen.writeStartArray();
                for(TermsAndCondition__c term : terms){
                    gen.writeStartObject();
                        gen.writeStringField('TermCode',getValue(string.valueOf(term.Term_Code__c))); 
                        gen.writeStringField('TermDescription', getValue(string.valueOf(term.Terms_Description__c)));
                        if(term.Chargeable_to_Customer__c){
                            gen.writeStringField('ChargeableToCustomer','Y'); 
                        }else{
                            gen.writeStringField('ChargeableToCustomer','N'); 
                        }
                        gen.writeStringField('ChargeType', 'A');
                        // gen.writeStringField('ChargeType',string.valueOf(term.Charge_Type__c));
                        gen.writeStringField('ChargeTypeValue',getValue(string.valueOf(term.Charge_Value__c)));
                        String clause = string.valueOf(term.Remarks__c) + ' ' + string.valueOf(term.Remarks_Value__c) + ' ' + string.valueOf(term.Remark_Type__c);
                        
                        gen.writeStringField('ChargeTypeCRM', 'A');
                        // gen.writeStringField('ChargeTypeCRM', getValue(term.Charge_Type__c));
                        gen.writeStringField('ChargeValueCRM', getValue(string.valueOf(term.Charge_Value__c)));
                        gen.writeStringField('ChargeUnitCRM', getValue(term.Charge_Type_Value__c));
                        gen.writeStringField('RemarksCRM', getValue(term.Remarks__c));
                        gen.writeStringField('RemarksValue', getValue(string.valueOf(term.Remarks_Value__c)));
                        gen.writeStringField('RemarksType', getValue(term.Remark_Type__c));
                    gen.writeEndObject();
                    i++;
                }
            gen.writeEndArray();
        gen.writeEndObject();
        String jsonData = gen.getAsString();
        System.debug('---sendContractToERP--jsonData-');
        system.debug(jsonData);
        return jsonData;
    }

    public static void updateSalesAgreement( HttpResponse response, Map<String, Object> result, ET_Sales_Agreement__c sa){
        if (response.getStatusCode() == 200) {
            if(string.valueOf(result.get('StatusFlag')) =='S'){
                sa.Integration_Status__c ='Success';
                sa.Integration_Message__c = '';
                sa.ETSALES_Contract_No__c = string.valueOf(result.get('ContractNumber'));
            }else{
                sa.Integration_Status__c ='Failed'; 
                sa.Integration_Message__c =string.valueOf(result.get('ErrorMsg'));
            }
        }
        else{
            sa.Integration_Status__c ='Failed';
            sa.Integration_Message__c =string.valueOf(result.get('ErrorMsg'));
        }
        update sa;
    }

    @AuraEnabled 
    public static void deleteSalesAggmnt(string recordId){ 
       
        ET_Sales_Agreement__c sal = new ET_Sales_Agreement__c(Id=recordId);
        delete sal;
    }

    public static String getValue(String str){
        return str == null ? '' : str;
    }

    public static ET_Sales_Agreement__c getSalesAgreemnetDetail(String saId){
        return [select id,Name,Sales_Agreement_Type__c,Round_Decimal__c,Auto_Invoice__c,
                    ETSALES_Opportunity__r.GL_Project_Code_Lookup__r.Project_Code__c,Salesforce_Customer__c,
                    ETSALES_Opportunity__r.GL_Activity_Lookup__r.GL_Activity_Code__c, ETSALES_Customer_Quote__c,
                    ETSALES_Opportunity__r.GL_Location_Lookup__r.Location_Code__c,Contract_End_Date__c,
                    Contract_Start_Date__c,Agreement_Type__r.Agreement_Id__c,Customer_PO_No__c,
                    Salesforce_Customer__r.AccountNumber,Salesforce_Customer__r.ETSALES_Customer_Account_Id__c,
                    Contract_Payment_Type__c, Driver_OT_Allowed__c, Max_Driver_OT__c, Administration_Charges__c, 
                    Premature_Charges__c, Customer_Reference__c, Service_Contract_Rule__c, Contract_Renewal_Date__c,
                    Mobilization_Date__c, Letter_Of_Award_Date__c, Contract_Execution_Date__c, PO_From_Customer_Date__c,
                    Fine_Customer_Email__c, Invoicing_Collection_Email__c, Is_Single_Invoice__c, Customer_Complaints__c,
                        (select id,name,Line_Number__c,Traffic_Fine__c,Allow_Secondary__c,Fuel_Collection_Basis__c,
                        Toll_Collection_Fee__c,Toll_Collection_Basis__c,Toll_Included__c,Fuel_Included__c,Remarks__c,
                        Service_Type__r.Service_Code__c,Option__r.Name,Route__r.Route_Id__c,Excess_Hours__c,
                        Excess_Km__c,KM_per_Day__c,Hours_per_Day__c,Line_Amount__c,Rate_Day__c,Amount_Calcualted__c,
                        Rate_Type__c,No_of_Vehicles_Employee__c,No_Of_Days__c,Friday__c,Thursday__c,Wednesday__c,
                        Tuesday__c,Saturday__c,Sunday__c,Monday__c,Item__r.Name,Contract_Start_Date__c,Contract_End_Date__c,
                        Effective_Date__c from Sales_Agreement_Sub_Line_Items__r)
                from ET_Sales_Agreement__c where Id=:saId]; 
    }

    public static List<TermsAndCondition__c> getTermsAndCondition(String cqId){
        return [Select id, name, Terms_Description__c, Term_Code__c, Charge_Type__c, 
                Charge_Value__c, Charge_Type_Value__c, Chargeable_to_Customer__c, 
                Remarks__c, Remarks_Value__c, Remark_Type__c, Additional_Term_Text__c
                from TermsAndCondition__c where Customer_Quote__c=:cqId];
    }

    @AuraEnabled
    public static List<String>  fetchCustomerQuoteLineItem(String cqId){
        try {
            List<String> lineItems = new List<String>();
            for(Customer_Vehicle_Quote_Item__c item : [Select id,name from Customer_Vehicle_Quote_Item__c where Customer_Quote__c=:cqId AND Is_Label_Row__c=false AND Is_CheckBox_Row__c=false]){
                lineItems.add(item.name);
            }
            for(Customer_Workforce_Quote_Item__c item : [Select id,name from Customer_Workforce_Quote_Item__c where Quote__c=:cqId AND  Is_Label_Row__c=false AND Is_CheckBox_Row__c=false]){
                lineItems.add(item.name);
            }
            return lineItems;
        } catch (Exception e) {
            throw new AuraHandledException(e.getMessage());
        }
    }
    
    //fetch sales agreement based on operting unit
    @AuraEnabled
    public static List<PicklistOption> fetchSalesAgreementTypes(String cqId){
        List<ETSALES_Account_Sites__c> operatingUnits = [Select id,name,ETSALES_Operating_unit__r.name, ETSALES_Operating_unit__r.ETSALES_Organization_Id__c, 
                    ETSALES_Operating_unit__r.Sector__c, ETSALES_Operating_unit__r.Agreement_Type__c from ETSALES_Account_Sites__c
                    where ETSALES_Account__c IN (select Account_Name__c from Customer_Quote__c where id =:cqId)];
        List< String> operatingUnitsName = new List<String>();
        for(ETSALES_Account_Sites__c  operatingUnit : operatingUnits){
            String agreements = operatingUnit.ETSALES_Operating_unit__r.Agreement_Type__c;
            if(String.isNotBlank(agreements)){
                operatingUnitsName.addAll(agreements.split(';'));
            }
        }
        List<PicklistOption> options = new List<PicklistOption>();
        List<Schema.PicklistEntry> allOptions = ETSALES_Operating_unit__c.Agreement_Type__c.getDescribe().getPicklistValues();
        for(Schema.PicklistEntry sp : allOptions){
            if(operatingUnitsName.contains(sp.getValue())){
                options.add( new PicklistOption( sp.getLabel(), sp.getValue() ) );
            }
        }
        return options;
    }

    public class PicklistOption {
        
        @AuraEnabled
        public String label { get; set; }
        
        @AuraEnabled
        public String value { get; set; }
        
        public PicklistOption( String label, String value ) {
            this.label = label;
            this.value = value;
        }
        
    }

    public static void testCoverage1(){
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
    
    public static void testCoverage2(){
        Integer i = 0;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}