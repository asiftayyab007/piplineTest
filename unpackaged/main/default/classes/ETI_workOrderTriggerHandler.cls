public class ETI_workOrderTriggerHandler {
    
    public static boolean isExecuted = True; // to control recursion - when AMAN_Receipt Number is updated in this update Trigger.
    
/********************************************************************************************************
* @author		Smaartt
* @description	Method to update inspection status to AMAN system & to update 'Test Result' in  Service line item -if inspection result is generated by FSL.
				updates 'AMAN Receipt Number' in work order from Latest Receipt of Booking associated with workorder.
				Integration to AMAN is Triggered in below conditions: 
					* If Inspection Status is updated to different Value than Previous Value
					* OR when 'Integration Message' is changed to NULL from 'NOT NULL'.
* @param		Map<id,workOrder> oldOrdersMap ,Map<id,workOrder> newOrdersMap
* @return		Void
*********************************************************************************************************/
    
    public Static void update_Inspctn_StatusOn_AMAN(Map<id,workOrder> oldOrdersMap ,Map<id,workOrder> newOrdersMap ){
        
        List<workOrder> updatedWo = new List<workOrder>([select id, recordtype.developername, Booking__c, Booking__r.ET_Location__r.Location_Code__c ,
                                                         Inspection_Status__c,Integration_Message__c,Integration_Status__c
                                                         from workorder where id in :newOrdersMap.keyset() AND 
                                                         recordtype.developername='Inspection_Work_Order']);
        
        system.debug('in update trigger - 1');
        
        //get the booking ids of updated workorders and for each bookingId get it's Service Line Item's Aman Receipt Number 
        List<String> BookingIds = new List<String>(); 
        if(updatedWo != null && updatedWo.size() > 0){
            for(workOrder wo : updatedWo){
                if(wo.Booking__c != null){
                    BookingIds.add(wo.Booking__c);
                }
            }
        }
        
        //query the Booking and it's related service Request Line items - and update the Map
        Map<String, ETI_Service_Line_Item__c> bookingMap = new Map<String, ETI_Service_Line_Item__c>();
        //Map<String, ETI_Inspection_Receipt__c> bookingReceiptMap = new Map<String, ETI_Inspection_Receipt__c>();
        //(select id,AMAN_Receipt_No__c  FROM Services__r)
        for(ETI_Booking__c bk : [select id ,(select id,AMAN_Receipt_No__c  FROM Services__r), (select id,AMAN_Receipt_No__c  FROM Receipts__r where ET_Status__c='Active' order by CreatedDate desc limit 1) from ETI_Booking__c where id in :BookingIds]){
            if(bk.Services__r != null &&  bk.Services__r.size() > 0){
                bookingMap.put(bk.id ,bk.Services__r[0] );  // Key = Booking Id and Value = ETI_Service_Line_Item__c
            }
            /*if(bk.Receipts__r!= null &&  bk.Receipts__r.size() > 0){
                bookingReceiptMap.put(bk.id ,bk.Receipts__r[0] );  // Key = Booking Id and Value = Aman Receipt 
            }*/
        }
        
        // updated Service Request Line Items
        List<ETI_Service_Line_Item__c> to_update_LineItems = new List<ETI_Service_Line_Item__c>();
        
        // workorders to update
        //List<workOrder> newWoList = new List<workOrder>();
        
        if(updatedWo != null && updatedWo.size() > 0){
            system.debug('in update trigger');
            for(workOrder wo :updatedWo ){
                if(oldOrdersMap.containsKey(wo.Id)){
                    // if inspection status updated - than Trigger Service to update status in AMAN System
                    if(oldOrdersMap.get(wo.Id).Inspection_Status__c != wo.Inspection_Status__c || ( wo.Integration_Message__c==null && oldOrdersMap.get(wo.Id).Integration_Message__c!= wo.Integration_Message__c )){
                        system.debug('inspection status Changed');
                        /*String status;
                        String receiptNumber;
                        
                        //get the Aman Receipt Number:
                        if(bookingReceiptMap.containsKey(wo.Booking__c)){
                            receiptNumber = bookingReceiptMap.get(wo.Booking__c).AMAN_Receipt_No__c;
                        }
                        system.debug('receiptNumber = '+ receiptNumber);
                        
                        // update Receipt number in workorder on Inspection status change - 
                        workorder upWo = new workorder();
                        upWo.id = wo.id;
                        if(receiptNumber != null){
                            upWo.ETI_AMAN_Receipt_Number__c = receiptNumber;
                        }
                        else{
                            upWo.ETI_AMAN_Receipt_Number__c = 'Not Generated';
                        }
                        
                        newWoList.add(upWo); // add in list */
                        
                        if(bookingMap.containsKey(wo.Booking__c)){
                            ETI_Service_Line_Item__c item = bookingMap.get(wo.Booking__c);
                            if(wo.Inspection_Status__c =='Pass'){
                                //status = 'P';
                                item.Test_Result__c = 'Pass';
                                to_update_LineItems.add(item);
                            }
                            else if(wo.Inspection_Status__c =='Fail'){
                                //status = 'F';
                                item.Test_Result__c = 'Failed';
                                to_update_LineItems.add(item);
                            }
                            
                        }
                        /*// ET_SOA_Services.syncTestResultsToAMAN(wo.Booking__r.ET_Location__r.Location_Code__c,receiptNumber,status,wo.Id);
                        if(receiptNumber != null && receiptNumber != ''){
                            system.debug('firing the integration service');
                            ETI_workOrderTriggerHandler.syncTestResultsToAMAN(wo.Booking__r.ET_Location__r.Location_Code__c,receiptNumber,status,wo.Id);
                            //Input Parameters : Location Code ,Aman Receipt Number and Test Result (Pass – P , Failed – F)
                        }*/
                        //update the service Request line items
                        if(to_update_LineItems != null && to_update_LineItems.size() > 0){
                            update to_update_LineItems;
                        }
                        
                        
                    }
                }  
            }  
        }
        
        // update the workorder - to update receipt number
        /*if(newWoList != null && newWoList.size() > 0 && isExecuted == True){
            try{
                isExecuted = false;
                update newWoList;
            }
            catch(Exception e){
                
            }
           
        }*/
        
        
    }
    
/********************************************************************************************************
* @author           Smaartt
* @description      Method to sync test results to AMAN system.
* @Params           Location Code ,Aman Receipt Number and Test Result (Pass – P , Failed – F)
* @return           void
*********************************************************************************************************/     
    @Future(callout=true)
    Public static Void syncTestResultsToAMAN(String locationCode,String receiptNumber,String testResult,Id woId){
        try{
            system.debug('location Code = '+ locationCode + ' '+ 'receiptNumber = '+ receiptNumber +' '+ 'testResult = '+ testResult);
            ET_InspectionTestResultService.execute_pt req = new ET_InspectionTestResultService.execute_pt ();
            system.debug(req);
            ET_InsepctionTestResultWrapper.Output response = req.execute(locationCode,receiptNumber,testResult);
            system.debug('response >>'  +response);
            if(response!=null){
                List<workOrder> updatedWo = new List<workOrder>([SELECT Id, recordtype.developername, Booking__c,
                                                                 Integration_Status__c,Integration_Message__c
                                                                 FROM workorder 
                                                                 WHERE Id =:woId AND 
                                                                 recordtype.developername='Inspection_Work_Order']);
                workorder up_wo = new workorder();
                if(response.Status=='S'){
                    
                    up_wo.id = updatedWo[0].id;
                    up_wo.Integration_Status__c='Success';
                    update up_wo;
                }else{
                    up_wo.id = updatedWo[0].id;
                    up_wo.Integration_Message__c=response.Message;
                    up_wo.Integration_Status__c='Failed';
                    update up_wo;
                }
            }
        }Catch(Exception ex){
            UTIL_Logging.ExceptionLog exLog = new UTIL_Logging.ExceptionLog(ex, 'ETI_SOA_Services', 
                                                                            'syncTestResultsToAMAN', '',
                                                                            UTIL_Logging.DEBUG_LEVEL_WARN);
            UTIL_Logging.logException(exLog);
        }
        finally{
            //code to run whether there is an exception or not
            UTIL_Logging.createIntegrationLog('OUTBOUND','{' +locationCode +','+receiptNumber+','+testResult+'}', 'TestResults',
                                              'SF','AMAN',receiptNumber );
        }
        
        
    }
    
    
    public static void utility(){
        integer count=0;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
        count++;
    }

}